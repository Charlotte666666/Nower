package com.project.enjoyit.sendView.activity;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.android.volley.AuthFailureError;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.Request.Method;
import com.android.volley.toolbox.StringRequest;
import com.baidu.platform.comapi.map.s;
import com.project.enjoyit.R;
import com.project.enjoyit.entity.Show;
import com.project.enjoyit.global.MyApplication;
import com.project.enjoyit.global.MyURL;
import com.project.enjoyit.sendView.util.Bimp;
import com.project.enjoyit.sendView.util.FileUtils;
import com.project.enjoyit.sendView.util.ImageItem;
import com.project.enjoyit.sendView.util.PublicWay;
import com.project.enjoyit.sendView.util.Res;
import com.project.enjoyit.utils.ImageUtil;
import com.project.enjoyit.utils.MyPlace;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.TextureView;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;



/**
 * 首页面activity
 *
 */
public class SendShowActivity extends Activity {

	private static final String TAG = "SendShowActivity";
	
	private GridView noScrollgridview;
	private GridAdapter adapter;
	private View parentView;
	private PopupWindow pop = null;
	private LinearLayout ll_popup;
	public static Bitmap bimap ;
	
	private EditText etContent;
	private TextView btSend;
	public static final int CODE_POST_SHOW_FINISHED = 0x46;
	private static final int CODE_HANDLER_TOAST = 0xfe;
	
	Handler handler = new Handler(){
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case ImageUtil.CODE_UPLOADED_IMAGES:
				postShows(msg.obj.toString());
				break;
			case CODE_HANDLER_TOAST:
				Toast.makeText(SendShowActivity.this, msg.obj.toString(), Toast.LENGTH_SHORT).show();
				break;
			default:
				break;
			}
		};
	};
	private void sendHandlerMsg(int code, String obj){
		Message msg = new Message();
		msg.what = code;
		msg.obj = obj;
		handler.sendMessage(msg);
	}
	void postShows(final String images){
		final String username = MyApplication.getUser().getUsername();
		MyApplication.getMyPlace();
		final String address = MyPlace.getMyLocation().getAddrStr();
		final String token = MyApplication.getUser().getToken();
		final String content = etContent.getText().toString().trim();
		final String audios = "";
		final int is_anonymous = 0;
		Log.e(TAG, images);
		
		StringRequest stringRequest = new StringRequest(Method.POST, MyConfig.POST_SHOW, 
				new Response.Listener<String>() {

					@Override
					public void onResponse(String response) {
						Log.e(TAG, "上传成功"+response);
						JSONObject jsonObject;
						try {
							jsonObject = new JSONObject(response);
							if (jsonObject.getInt("code") == 1 && jsonObject.getInt("n") == 1){
								JSONObject jshow = jsonObject.getJSONObject("show");
								Show show = new Show();
								show.setShow_id(jshow.getInt("show_id"));
								show.setUsername(jshow.getString("username"));
								show.setHead_pic(jshow.getString("head_pic"));
								show.setShow_time(jshow.getString("show_time"));
								show.setContent(jshow.getString("content"));
								show.setImage_files(jshow.getString("images"));
								show.setAudio_file(jshow.getString("audios"));
								show.setIs_anonymous(jshow.getInt("is_anonymous"));
								show.setAddress(jshow.getString("address"));
								show.setLatitude(jshow.getInt("latitude"));
								show.setLongitude(jshow.getInt("longitude"));
								show.setLikes(jshow.getInt("likes"));
								
								MainActivity.addShows(show);
								sendHandlerMsg(CODE_HANDLER_TOAST, "上传成功");
								finish();
							}
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
				}, new Response.ErrorListener() {

					@Override
					public void onErrorResponse(VolleyError error) {
						Log.e(TAG, "上传失败"+error.toString());
						
					}
				}){
			@Override
			protected Map<String, String> getParams()
					throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("token", token);
				map.put("username", username);
				map.put("content", content);
				map.put("images", images);
				map.put("audios", audios);
				map.put("is_anonymous", is_anonymous+"");
				map.put("address", address);
				return map;
			}
		};
		MyApplication.addToRequestQueue(stringRequest, TAG);
	}
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Res.init(this);
		bimap = BitmapFactory.decodeResource(
				getResources(),
				R.drawable.icon_addpic_unfocused);
		PublicWay.activityList.add(this);
		parentView = getLayoutInflater().inflate(R.layout.activity_send_shows, null);
		requestWindowFeature(Window.FEATURE_NO_TITLE);// 去掉标题栏
		setContentView(parentView);
		Init();
	}

	public void Init() {
		etContent = (EditText)findViewById(R.id.et_content);
		btSend = (TextView)findViewById(R.id.activity_selectimg_send);
		btSend.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				if (etContent.getText().toString().isEmpty()){
					Toast.makeText(SendShowActivity.this, "你不觉得应该说点什么吗？", Toast.LENGTH_SHORT).show();
					return;
				}
				//Toast.makeText(SendShowActivity.this, Bimp.tempSelectBitmap.size()+"", Toast.LENGTH_SHORT).show();
				ArrayList<Bitmap> bitmaps = new ArrayList<Bitmap>();
				for (ImageItem item: Bimp.tempSelectBitmap){
					bitmaps.add(item.getBitmap());
				}
				ImageUtil.uploadImgs(SendShowActivity.this, bitmaps, MyURL.UPLOAD_IMAGE_URL, handler);
				
			}
		});
		pop = new PopupWindow(SendShowActivity.this);
		
		View view = getLayoutInflater().inflate(R.layout.item_popupwindows, null);

		ll_popup = (LinearLayout) view.findViewById(R.id.ll_popup);
		
		pop.setWidth(LayoutParams.MATCH_PARENT);
		pop.setHeight(LayoutParams.WRAP_CONTENT);
		pop.setBackgroundDrawable(new BitmapDrawable());
		pop.setFocusable(true);
		pop.setOutsideTouchable(true);
		pop.setContentView(view);
		
		RelativeLayout parent = (RelativeLayout) view.findViewById(R.id.parent);
		Button bt1 = (Button) view
				.findViewById(R.id.item_popupwindows_camera);
		Button bt2 = (Button) view
				.findViewById(R.id.item_popupwindows_Photo);
		Button bt3 = (Button) view
				.findViewById(R.id.item_popupwindows_cancel);
		parent.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				pop.dismiss();
				ll_popup.clearAnimation();
			}
		});
		bt1.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				photo();
				pop.dismiss();
				ll_popup.clearAnimation();
			}
		});
		bt2.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				Intent intent = new Intent(SendShowActivity.this,
						AlbumActivity.class);
				startActivity(intent);
				overridePendingTransition(R.anim.activity_translate_in, R.anim.activity_translate_out);
				pop.dismiss();
				ll_popup.clearAnimation();
			}
		});
		bt3.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				pop.dismiss();
				ll_popup.clearAnimation();
			}
		});
		
		noScrollgridview = (GridView) findViewById(R.id.noScrollgridview);	
		noScrollgridview.setSelector(new ColorDrawable(Color.TRANSPARENT));
		adapter = new GridAdapter(this);
		adapter.update();
		noScrollgridview.setAdapter(adapter);
		noScrollgridview.setOnItemClickListener(new OnItemClickListener() {

			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				if (arg2 == Bimp.tempSelectBitmap.size()) {
					Log.i("ddddddd", "----------");
					ll_popup.startAnimation(AnimationUtils.loadAnimation(SendShowActivity.this,R.anim.activity_translate_in));
					pop.showAtLocation(parentView, Gravity.BOTTOM, 0, 0);
					
					InputMethodManager imm =(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  
					imm.hideSoftInputFromWindow(etContent.getWindowToken(), 0);  
				} else {
					Intent intent = new Intent(SendShowActivity.this,
							GalleryActivity.class);
					intent.putExtra("position", "1");
					intent.putExtra("ID", arg2);
					startActivity(intent);
				}
			}
		});

	}



	@SuppressLint("HandlerLeak")
	public class GridAdapter extends BaseAdapter {
		private LayoutInflater inflater;
		private int selectedPosition = -1;
		private boolean shape;

		public boolean isShape() {
			return shape;
		}

		public void setShape(boolean shape) {
			this.shape = shape;
		}

		public GridAdapter(Context context) {
			inflater = LayoutInflater.from(context);
		}

		public void update() {
			loading();
		}

		public int getCount() {
			if(Bimp.tempSelectBitmap.size() == 9){
				return 9;
			}
			return (Bimp.tempSelectBitmap.size() + 1);
		}

		public Object getItem(int arg0) {
			return null;
		}

		public long getItemId(int arg0) {
			return 0;
		}

		public void setSelectedPosition(int position) {
			selectedPosition = position;
		}

		public int getSelectedPosition() {
			return selectedPosition;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder holder = null;
			if (convertView == null) {
				convertView = inflater.inflate(R.layout.item_published_grida,
						parent, false);
				holder = new ViewHolder();
				holder.image = (ImageView) convertView
						.findViewById(R.id.item_grida_image);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}

			if (position ==Bimp.tempSelectBitmap.size()) {
				holder.image.setImageBitmap(BitmapFactory.decodeResource(
						getResources(), R.drawable.icon_addpic_unfocused));
				if (position == 9) {
					holder.image.setVisibility(View.GONE);
				}
			} else {
				holder.image.setImageBitmap(Bimp.tempSelectBitmap.get(position).getBitmap());
			}

			return convertView;
		}

		public class ViewHolder {
			public ImageView image;
		}

		Handler handler = new Handler() {
			public void handleMessage(Message msg) {
				switch (msg.what) {
				case 1:
					adapter.notifyDataSetChanged();
					break;
				}
				super.handleMessage(msg);
			}
		};

		public void loading() {
			new Thread(new Runnable() {
				public void run() {
					while (true) {
						if (Bimp.max == Bimp.tempSelectBitmap.size()) {
							Message message = new Message();
							message.what = 1;
							handler.sendMessage(message);
							break;
						} else {
							Bimp.max += 1;
							Message message = new Message();
							message.what = 1;
							handler.sendMessage(message);
						}
					}
				}
			}).start();
		}
	}

	public String getString(String s) {
		String path = null;
		if (s == null)
			return "";
		for (int i = s.length() - 1; i > 0; i++) {
			s.charAt(i);
		}
		return path;
	}

	protected void onRestart() {
		adapter.update();
		super.onRestart();
	}

	private static final int TAKE_PICTURE = 0x000001;

	public void photo() {
		Intent openCameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		startActivityForResult(openCameraIntent, TAKE_PICTURE);
	}

	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		switch (requestCode) {
		case TAKE_PICTURE:
			if (Bimp.tempSelectBitmap.size() < 9 && resultCode == RESULT_OK) {
				
				String fileName = String.valueOf(System.currentTimeMillis());
				Bitmap bm = (Bitmap) data.getExtras().get("data");
				FileUtils.saveBitmap(bm, fileName);
				
				ImageItem takePhoto = new ImageItem();
				takePhoto.setBitmap(bm);
				Bimp.tempSelectBitmap.add(takePhoto);
			}
			break;
		}
	}
	
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			for(int i=0;i<PublicWay.activityList.size();i++){
				if (null != PublicWay.activityList.get(i)) {
					PublicWay.activityList.get(i).finish();
				}
			}
//			System.exit(0);
		}
		return true;
	}

}

