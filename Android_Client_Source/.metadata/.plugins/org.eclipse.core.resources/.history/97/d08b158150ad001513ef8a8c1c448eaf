package com.project.enjoyit;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONObject;

import com.android.volley.Response;
import com.android.volley.Response.ErrorListener;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.project.enjoyit.global.MyAlgorithm;
import com.project.enjoyit.global.MyApplication;
import com.project.enjoyit.global.MyURL;
import com.project.enjoyit.utils.ImageUtil;
import com.project.enjoyit.utils.PictureUtil;
import com.project.enjoyit.view.SelectPicPopupWindow;
import com.rxy.edittextmodel_master.ClearableEditText;

import dmax.dialog.SpotsDialog;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Picture;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class RegisterActivity extends Activity {

	private static final String TAG = "RegisterActivity";

	private ClearableEditText etUsername;
	private ClearableEditText etPhone;
	private ClearableEditText etPassword;
	private ClearableEditText etRePassword;
	private Button btRegister;
	private Button btCancel;
	private ImageButton ibHead;

	private static AlertDialog uploading;
	// 自定义的弹出框类
	SelectPicPopupWindow menuWindow;
	/* 头像文件 */
	private static final String IMAGE_FILE_NAME = "temp_head_image.jpg";
	/* 请求识别码 */
	private static final int CODE_GALLERY_REQUEST = 0xa0;
	private static final int CODE_CAMERA_REQUEST = 0xa1;
	private static final int CODE_RESULT_REQUEST = 0xa2;
	// 裁剪后图片的宽(X)和高(Y),480 X 480的正方形。
	private static int output_X = 160;
	private static int output_Y = 160;
	private static String head_pic_name = "";

	private static Context context;
	private final static int CODE_TOAST_MSG = 0;
	public static Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case CODE_TOAST_MSG:
				Toast.makeText(context, msg.obj.toString(), Toast.LENGTH_SHORT)
						.show();
				break;
			case ImageUtil.CODE_UPLOADED_IMAGES:
				head_pic_name = msg.obj.toString();
				uploading.dismiss();
				Toast.makeText(context, "头像上传成功", Toast.LENGTH_SHORT).show();
				break;
			}
		}
	};

	public void myToast(String msg) {
		handler.obtainMessage(CODE_TOAST_MSG, msg).sendToTarget();
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);// 去掉标题栏
		setContentView(R.layout.activity_register);
		context = RegisterActivity.this;
		initView();
		initListener();
		uploading = new SpotsDialog(RegisterActivity.this);
	}

	private void initView() {
		etUsername = (ClearableEditText) findViewById(R.id.et_username);
		etPhone = (ClearableEditText) findViewById(R.id.et_phone);
		etPassword = (ClearableEditText) findViewById(R.id.et_password);
		etRePassword = (ClearableEditText) findViewById(R.id.et_re_password);
		btRegister = (Button) findViewById(R.id.bt_register);
		btCancel = (Button) findViewById(R.id.bt_cancel);
		ibHead = (ImageButton) findViewById(R.id.ib_head_pic);

	}

	private void initListener() {
		btRegister.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				register();
			}
		});
		btCancel.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				finish();
			}
		});
		ibHead.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {

				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
//				imm.showSoftInput(etUsername, InputMethodManager.SHOW_FORCED);
				imm.hideSoftInputFromWindow(etUsername.getWindowToken(), 0); //强制隐藏键盘 
				
				initMenuWindow();
			}
		});
	}

	protected void register() {

		final String username = etUsername.getText().toString().trim();
		final String phone = etPhone.getText().toString().trim();
		final String password = MyAlgorithm.hashMd5(etPassword.getText()
				.toString().trim());
		final String rePassword = MyAlgorithm.hashMd5(etRePassword.getText()
				.toString().trim());
		if (username.isEmpty() || phone.isEmpty() || password.isEmpty()
				|| rePassword.isEmpty()) {
			myToast("还没填完哦");
		} else if (!password.equals(rePassword)) {
			myToast("两次输入的密码不相同");
			etPassword.setText("");
			etRePassword.setText("");
		} else {
			final AlertDialog loading = new SpotsDialog(RegisterActivity.this);
			loading.setTitle("注册中，请稍候...");
			loading.show();
			Listener<String> listener = new Response.Listener<String>() {
				@Override
				public void onResponse(String response) {
					try {
						JSONObject res = new JSONObject(response);
						Log.e(TAG, res.getString("msg"));
						myToast(res.getString("msg"));
						if (res.getInt("code") == 1) {
							Intent intent = new Intent();
							intent.putExtra("username", username);
							setResult(RESULT_OK, intent);
							finish();
						}
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						loading.dismiss();
					}
				}
			};
			ErrorListener errorListener = new Response.ErrorListener() {
				@Override
				public void onErrorResponse(VolleyError error) {
					error.printStackTrace();
					myToast("是不是网络出问题了呢？");
					loading.dismiss();
				}

			};
			Map<String, String> map = new HashMap<String, String>();
			map.put("username", username);
			map.put("phone", phone);
			map.put("password", password);
			map.put("head_pic", head_pic_name);
			MyApplication.getMyVolley().addPostStringRequest(
					MyURL.REGISTER_URL, listener, errorListener, map, TAG);
		}

	}

	protected void initMenuWindow() {
		// 实例化SelectPicPopupWindow
		menuWindow = new SelectPicPopupWindow(RegisterActivity.this,
				itemsOnClick);
		// 显示窗口
		menuWindow.showAtLocation(
				RegisterActivity.this.findViewById(R.id.bt_register),
				Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0); // 设置layout在PopupWindow中显示的位置
		// 为弹出窗口实现监听类
	}

	private OnClickListener itemsOnClick = new OnClickListener() {

		public void onClick(View v) {
			menuWindow.dismiss();
			switch (v.getId()) {
			case R.id.btn_take_photo:
				choseHeadImageFromCameraCapture();
				break;
			case R.id.btn_pick_photo:
				choseHeadImageFromGallery();
				break;
			default:
				break;
			}

		}

	};

	// 从本地相册选取图片作为头像
	private void choseHeadImageFromGallery() {
		Intent intentFromGallery = new Intent();
		// 设置文件类型
		intentFromGallery.setType("image/*");
		intentFromGallery.setAction(Intent.ACTION_GET_CONTENT);
		startActivityForResult(intentFromGallery, CODE_GALLERY_REQUEST);
	}

	// 启动手机相机拍摄照片作为头像
	private void choseHeadImageFromCameraCapture() {
		Intent intentFromCapture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

		// 判断存储卡是否可用，存储照片文件
		if (hasSdcard()) {
			intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, Uri
					.fromFile(new File(Environment
							.getExternalStorageDirectory(), IMAGE_FILE_NAME)));
		}

		startActivityForResult(intentFromCapture, CODE_CAMERA_REQUEST);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent intent) {

		// 用户没有进行有效的设置操作，返回
		if (resultCode == RESULT_CANCELED) {
			// Toast.makeText(getApplication(), "取消", Toast.LENGTH_LONG).show();
			return;
		}

		switch (requestCode) {
		case CODE_GALLERY_REQUEST:
			cropRawPhoto(intent.getData());
			break;

		case CODE_CAMERA_REQUEST:
			if (hasSdcard()) {
				File tempFile = new File(
						Environment.getExternalStorageDirectory(),
						IMAGE_FILE_NAME);
				Bitmap bitmap = PictureUtil.getSmallBitmap(tempFile
						.getAbsolutePath());

				Uri uri = Uri.parse(MediaStore.Images.Media.insertImage(
						getContentResolver(), bitmap, null, null));
				cropRawPhoto(uri);
				// cropRawPhoto(Uri.fromFile(tempFile));
			} else {
				Toast.makeText(getApplication(), "没有SDCard!",
						Toast.LENGTH_SHORT).show();
			}

			break;

		case CODE_RESULT_REQUEST:
			if (intent != null) {
				setImageToHeadView(intent);
			}
			break;
		}
		super.onActivityResult(requestCode, resultCode, intent);
	}

	/**
	 * 裁剪原始的图片
	 */
	public void cropRawPhoto(Uri uri) {

		Intent intent = new Intent("com.android.camera.action.CROP");
		intent.setDataAndType(uri, "image/*");

		// 设置裁剪
		intent.putExtra("crop", "true");

		// aspectX , aspectY :宽高的比例
		intent.putExtra("aspectX", 1);
		intent.putExtra("aspectY", 1);

		// outputX , outputY : 裁剪图片宽高
		intent.putExtra("outputX", output_X);
		intent.putExtra("outputY", output_Y);
		intent.putExtra("return-data", true);

		startActivityForResult(intent, CODE_RESULT_REQUEST);
	}

	/**
	 * 提取保存裁剪之后的图片数据，并设置头像部分的View
	 */
	private void setImageToHeadView(Intent intent) {
		Bundle extras = intent.getExtras();
		if (extras != null) {
			Bitmap photo = extras.getParcelable("data");
			ibHead.setImageBitmap(photo);
			uploading.show();
			upload_head_pic(photo);
		}
	}

	private void upload_head_pic(Bitmap bitmap) {
		ImageUtil.uploadImg(RegisterActivity.this, bitmap,
				MyURL.UPLOAD_IMAGE_URL, handler);
	}

	/**
	 * 检查设备是否存在SDCard的工具方法
	 */
	public static boolean hasSdcard() {
		String state = Environment.getExternalStorageState();
		if (state.equals(Environment.MEDIA_MOUNTED)) {
			// 有存储的SDCard
			return true;
		} else {
			return false;
		}
	}

}
